{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block body %}
    <h1 class="mb-4">Ваши транзакции</h1>

    {% for message in app.flashes('error') %}
        <div class="alert alert-danger" role="alert">{{ message }}</div>
    {% endfor %}
    {% for message in app.flashes('success') %}
        <div class="alert alert-success" role="alert">{{ message }}</div>
    {% endfor %}

    {{ form_start(filter_form, {'method': 'GET', 'attr': {'class': 'mb-4'}}) }}
    <div class="filter-form d-flex gap-3 flex-wrap align-items-end">
        {{ form_row(filter_form.category, {'attr': {'class': 'form-select'}}) }}
        {{ form_row(filter_form.isIncome, {'attr': {'class': 'form-select'}}) }}
        {{ form_row(filter_form.startDate, {'attr': {'class': 'form-control'}}) }}
        {{ form_row(filter_form.endDate, {'attr': {'class': 'form-control'}}) }}
        <button type="submit" class="btn btn-primary">Фильтровать</button>
        <a href="{{ path('dashboard') }}" class="btn btn-secondary">Сбросить</a>
        <button type="button" id="toggleChart" class="btn btn-info"><i class="bi bi-bar-chart"></i> Показать график</button>
    </div>
    {{ form_end(filter_form) }}

    <div id="statsContainer" class="stats card mb-4">
        <div class="card-body">
            <p>Доходы: <strong>{{ income|number_format(2, '.', ' ') }}</strong> руб.</p>
            <p>Расходы: <strong>{{ expenses|number_format(2, '.', ' ') }}</strong> руб.</p>
            <p>Баланс: <strong>{{ (income - expenses)|number_format(2, '.', ' ') }}</strong> руб.</p>
        </div>
    </div>

    <div id="chartContainer" class="chart-container card mb-4" style="display: none;">
        <div class="card-body">
            <canvas id="transactionsChart" width="300" height="150"></canvas>
        </div>
    </div>

    {% if pagination|length == 0 %}
        <p>У вас пока нет транзакций. <a href="{{ path('transaction_new') }}" class="btn btn-success"><i class="bi bi-plus"></i> Добавить первую?</a></p>
    {% else %}
        <form method="post" action="{{ path('dashboard_delete_transactions') }}" id="transactionForm" onsubmit="return confirm('Вы уверены, что хотите удалить выбранные транзакции?');">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <button type="button" class="btn btn-outline-primary" id="toggleManagePanel">
                    <i class="bi bi-gear"></i> Управление транзакциями
                </button>
                <button type="submit" class="btn btn-danger" id="deleteSelected" style="display: none;">
                    <i class="bi bi-trash"></i> Удалить выбранные
                </button>
            </div>

            <table class="table table-striped table-hover">
                <thead class="table-dark">
                <tr>
                    <th><input type="checkbox" id="selectAll" style="display: none;"></th>
                    <th>Дата</th>
                    <th>Сумма</th>
                    <th>Категория</th>
                    <th>Описание</th>
                    <th>Действия</th>
                </tr>
                </thead>
                <tbody>
                {% for transaction in pagination %}
                    <tr>
                        <td><input type="checkbox" name="transactions[]" value="{{ transaction.id }}" class="transactionCheckbox" style="display: none;"></td>
                        <td>{{ transaction.date|date('Y-m-d') }}</td>
                        <td>{{ transaction.amount|number_format(2, '.', ' ') }}</td>
                        <td>{{ transaction.category.name }}</td>
                        <td>{{ transaction.description|default('—') }}</td>
                        <td>
                            <a href="{{ path('transaction_edit', {'id': transaction.id}) }}" class="btn btn-sm btn-outline-primary editButton" style="display: none;">
                                <i class="bi bi-pencil"></i> Редактировать
                            </a>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>

            <div class="pagination d-flex justify-content-center">
                {{ knp_pagination_render(pagination) }}
            </div>
        </form>
    {% endif %}

    <a href="{{ path('transaction_new') }}" class="btn btn-success"><i class="bi bi-plus"></i> Добавить транзакцию</a>

    <script>
        const ctx = document.getElementById('transactionsChart').getContext('2d');
        let chart = null;
        const chartData = {
            type: 'bar',
            data: {
                labels: [{% for category in categories_data|keys %}'{{ category }}',{% endfor %}],
                datasets: [{
                    data: [{% for amount in categories_data %}{{ amount }},{% endfor %}],
                    backgroundColor: [{% for category in categories_data|keys %}'{{ category in ['Зарплата', 'Подарки'] ? '#28a745' : '#dc3545' }}',{% endfor %}],
                    borderColor: [{% for category in categories_data|keys %}'{{ category in ['Зарплата', 'Подарки'] ? '#28a745' : '#dc3545' }}',{% endfor %}],
                    borderWidth: 1
                }]
            },
            options: {
                scales: { y: { beginAtZero: true } },
                plugins: { legend: { display: false } },
                animation: { duration: 1000, easing: 'easeInOutQuad' }
            }
        };

        const toggleButton = document.getElementById('toggleChart');
        const statsContainer = document.getElementById('statsContainer');
        const chartContainer = document.getElementById('chartContainer');

        toggleButton.addEventListener('click', () => {
            if (chartContainer.style.display === 'none') {
                statsContainer.classList.add('fade-out');
                setTimeout(() => {
                    statsContainer.style.display = 'none';
                    statsContainer.classList.remove('fade-out');
                    chartContainer.style.display = 'block';
                    chartContainer.classList.add('fade-in');
                    toggleButton.innerHTML = '<i class="bi bi-bar-chart"></i> Показать статистику';
                    toggleButton.classList.remove('btn-info');
                    toggleButton.classList.add('btn-secondary');
                    if (!chart) {
                        chart = new Chart(ctx, chartData);
                    }
                }, 300);
            } else {
                chartContainer.classList.add('fade-out');
                setTimeout(() => {
                    chartContainer.style.display = 'none';
                    chartContainer.classList.remove('fade-out');
                    statsContainer.style.display = 'block';
                    statsContainer.classList.add('fade-in');
                    toggleButton.innerHTML = '<i class="bi bi-bar-chart"></i> Показать график';
                    toggleButton.classList.remove('btn-secondary');
                    toggleButton.classList.add('btn-info');
                }, 300);
            }
        });

        // Управление транзакциями
        const toggleManagePanel = document.getElementById('toggleManagePanel');
        const deleteSelected = document.getElementById('deleteSelected');
        const checkboxes = document.querySelectorAll('.transactionCheckbox');
        const selectAll = document.getElementById('selectAll');
        const editButtons = document.querySelectorAll('.editButton'); // Добавляем кнопки редактирования
        let isManageMode = false;

        toggleManagePanel.addEventListener('click', () => {
            isManageMode = !isManageMode;
            checkboxes.forEach(checkbox => {
                checkbox.style.display = isManageMode ? 'block' : 'none';
            });
            selectAll.style.display = isManageMode ? 'block' : 'none';
            deleteSelected.style.display = isManageMode ? 'inline-block' : 'none';
            editButtons.forEach(button => {
                button.style.display = isManageMode ? 'inline-block' : 'none'; // Управляем видимостью кнопок "Редактировать"
            });
            if (!isManageMode) {
                checkboxes.forEach(checkbox => checkbox.checked = false);
                selectAll.checked = false;
            }
        });

        selectAll.addEventListener('change', () => {
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        });
    </script>
{% endblock %}